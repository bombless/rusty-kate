<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE language SYSTEM "language.dtd">
<language name="Test-Rust" version="0.0" section="Testing" extensions="*.highlighting.rs">
	<highlighting>
		<contexts>
			<!-- `attribute` is actually for coloring -->
			<!-- and `name` provides an entry -->
			<context attribute="Nothing" lineEndContext="#stay" name="outside">
				<DetectSpaces attribute="Spaces" context="#stay" />
				<IncludeRules context="comment" />
				<StringDetect attribute="Keyword" context="extern" String="extern" />
				<StringDetect attribute="Keyword" context="#stay" String="pub" />
				<StringDetect attribute="Keyword" context="trait-name" String="trait" />
				<StringDetect attribute="Keyword" context="function-signature-start" String="fn" />
				<StringDetect attribute="Keyword" context="mod" String="mod" />
				<StringDetect attribute="Keyword" context="use-start" String="use" />
				<StringDetect attribute="Keyword" context="const-start" String="const" />
				<StringDetect attribute="Keyword" context="alias" String="type" />
				<StringDetect attribute="Keyword" context="struct" String="struct" />
				<StringDetect attribute="Keyword" context="enum" String="enum" />
				<!-- pop(outside) pop(mod-start) pop(mod) -->
				<DetectChar attribute="Braces" context="#pop#pop#pop" char="}" />
				<DetectChar attribute="Directive" context="directive" char="#" />
			</context>
			<context attribute="Nothing" lineEndContext="#stay" name="enum">
				<StringDetect attribute="Keyword" context="#stay" String="pub" />
				<IncludeRules context="type" />
				<IncludeRules context="literal" />
				<DetectChar attribute="Colon" context="#stay" char=":" />
				<DetectChar attribute="Braces" context="#stay" char="{" />
				<DetectChar attribute="Braces" context="#pop" char="}" />
				<DetectChar attribute="Equal" context="#stay" char="=" />
				<DetectChar attribute="Comma" context="#stay" char="," />
			</context>
			<context attribute="Nothing" lineEndContext="#stay" name="struct">
				<DetectSpaces attribute="Spaces" context="#stay" />
				<IncludeRules context="comment" />
				<DetectChar attribute="Semicolon" context="#pop" char=";" />
				<DetectChar attribute="Braces" context="struct-field" char="{" />
				<DetectChar attribute="Comma" context="struct-field" char="," />
				<DetectIdentifier attribute="Type" context="#stay" />
				<DetectChar attribute="Generics" context="generics-parameters" char="&lt;" />
			</context>
			<context attribute="Nothing" lineEndContext="#stay" name="struct-field">
				<DetectSpaces attribute="Spaces" context="#stay" />
				<IncludeRules context="comment" />
				<StringDetect attribute="Keyword" context="#stay" String="pub" />
				<DetectIdentifier attribute="Field" context="#stay" />
				<DetectChar attribute="Colon" context="struct-field-type" char=":" />
				<!-- pop(struct-field) pop(struct) -->
				<DetectChar attribute="Braces" context="#pop#pop" char="}" />
			</context>
			<context attribute="Nothing" lineEndContext="#stay" name="struct-field-type">
				<IncludeRules context="type" />
				<!-- pop(struct-field-type) pop(struct-field) pop(struct) -->
				<DetectChar attribute="Braces" context="#pop#pop#pop" char="}" />
				<!-- pop(struct-field-type) pop(struct-field) -->
				<DetectChar lookAhead="true" context="#pop#pop" char="," />
			</context>
			<context attribute="Nothing" lineEndContext="#stay" name="alias">
				<DetectSpaces attribute="Spaces" context="#stay" />
				<IncludeRules context="comment" />
				<DetectIdentifier attribute="Type" context="#stay" />
				<RegExpr attribute="Lifetime" context="#stay" String="'[_a-z]+" />
				<DetectChar attribute="Type" context="#stay" char="+" />
				<DetectChar attribute="Type" context="#stay" char="," />
				<DetectChar attribute="Equal" context="alias-type" char="=" />
				<DetectChar attribute="Generics" context="#stay" char="&lt;" />
				<DetectChar attribute="Generics" context="#stay" char="&gt;" />
			</context>
			<context attribute="Nothing" lineEndContext="#stay" name="alias-type">
				<IncludeRules context="type" />
				<!-- pop(alias-type) pop(alias) -->
				<DetectChar attribute="Semicolon" context="#pop#pop" char=";" />
			</context>
			<context attribute="Nothing" lineEndContext="#stay" name="const-start">
				<DetectSpaces attribute="Spaces" context="#stay" />
				<IncludeRules context="comment" />
				<DetectIdentifier attribute="Const" context="const-colon" />
			</context>
			<context attribute="Nothing" lineEndContext="#stay" name="const-colon">
				<DetectSpaces attribute="Spaces" context="#stay" />
				<IncludeRules context="comment" />
				<DetectChar attribute="Colon" context="const-type" char=":" />
			</context>
			<context attribute="Nothing" lineEndContext="#stay" name="const-type">
				<DetectSpaces attribute="Spaces" context="#stay" />
				<IncludeRules context="comment" />
				<DetectIdentifier attribute="Type" context="const-equal" />
			</context>
			<context attribute="Nothing" lineEndContext="#stay" name="const-equal">
				<DetectSpaces attribute="Spaces" context="#stay" />
				<IncludeRules context="comment" />
				<DetectChar attribute="Equal" context="const-literal" char="=" />
			</context>
			<context attribute="Nothing" lineEndContext="#stay" name="const-literal">
				<DetectSpaces attribute="Spaces" context="#stay" />
				<IncludeRules context="comment" />
				<IncludeRules context="literal" />
				<!-- pop(const-literal) pop(const-equal) pop(const-type) pop(const-colon) pop(const-start) -->
				<DetectChar attribute="Semicolon" context="#pop#pop#pop#pop#pop" char=";" />
			</context>
			<context attribute="Nothing" lineEndContext="#stay" name="literal">
				<RegExpr attribute="Literal" context="#stay" String="\(\s*\)" />
				<RegExpr attribute="Literal" context="#stay" String="(0[xX])?[0-9a-fA-F]+" />
				<RegExpr attribute="Literal" context="#stay" String="[0-9]+\.[0-9]*(f32|f64)?" />
			</context>
			<context attribute="Nothing" lineEndContext="#stay" name="use-start">
				<DetectSpaces attribute="Spaces" context="#stay" />
				<IncludeRules context="comment" />
				<StringDetect attribute="Keyword" context="#stay" String="super" />
				<RegExpr lookAhead="true" context="use" String="::|\w" />
			</context>
			<context attribute="Nothing" lineEndContext="#stay" name="use">
				<DetectSpaces attribute="Spaces" context="#stay" />
				<IncludeRules context="comment" />
				<Detect2Chars attribute="Namespace" context="#stay" char=":" char1=":" />
				<RegExpr attribute="Namespace" context="use-element"
					String="(::\s*)?\w+\s*::|(::\s*)?\w+\s*::(\s*\w+\s*::)+" />
				<RegExpr lookAhead="true" context="use" String=".*[{;]" />
			</context>
			<context attribute="Nothing" lineEndContext="#stay" name="use-element">
				<DetectSpaces attribute="Spaces" context="#stay" />
				<IncludeRules context="comment" />
				<DetectChar attribute="Braces" context="use-inside-braces" char="{" />
				<!-- pop(use-element) pop(use) pop(use-start) -->
				<DetectChar attribute="Semicolon" context="#pop#pop#pop" char=";" />
				<RegExpr attribute="Namespace" context="#stay" String="[a-z][_a-z0-9]+" />
				<RegExpr attribute="Type" context="#stay" String="[A-Z]\w*[a-z]\w*" />
				<RegExpr attribute="Const" context="#stay" String="[A-Z][_A-Z0-9]+" />
			</context>
			<context attribute="Nothing" lineEndContext="#stay" name="use-inside-braces">
				<DetectSpaces attribute="Spaces" context="#stay" />
				<IncludeRules context="comment" />
				<RegExpr attribute="Namespace" context="#stay" String="[a-z][_a-z0-9]+" />
				<RegExpr attribute="Type" context="#stay" String="[A-Z]\w*[a-z]\w*" />
				<RegExpr attribute="Const" context="#stay" String="[A-Z][_A-Z0-9]+" />
				<DetectChar attribute="Comma" context="#stay" char="," />
				<DetectChar attribute="Braces" context="#pop" char="}" />
			</context>
			<context attribute="Directive" lineEndContext="#pop" name="directive" />
			<context attribute="Nothing" lineEndContext="#stay" name="comment">
				<RegExpr attribute="Comment" context="single-line-comment" String="//$|//[^/!]" />
				<RegExpr attribute="Doc" context="single-line-doc" String="//[/!]" />
				<RegExpr attribute="Comment" context="multiline-comment" String="/\*$|/\*[^*]|/\*\*\*$|/\*\*\*[^/]" />
				<RegExpr attribute="Doc" context="multiline-doc" String="/\*\*$|/\*\*[^*]" />
				<StringDetect attribute="Comment" context="#stay" String="/**/" />
				<StringDetect attribute="Doc" context="#stay" String="/***/" />
			</context>
			<context attribute="Comment" lineEndContext="#pop" name="single-line-comment" />
			<context attribute="Doc" lineEndContext="#pop" name="single-line-doc" />
			<context attribute="Comment" lineEndContext="#stay" name="multiline-comment">
				<Detect2Chars attribute="Comment" context="#pop" char="*" char1="/" />
				<Detect2Chars attribute="Comment" context="multiline-comment" char="/" char1="*" />
			</context>
			<context attribute="Doc" lineEndContext="#stay" name="multiline-doc">
				<Detect2Chars attribute="Doc" context="#pop" char="*" char1="/" />
			</context>
			<context attribute="Nothing" lineEndContext="#stay" name="mod">
				<DetectSpaces attribute="Spaces" context="#stay" />
				<IncludeRules context="comment" />
				<DetectIdentifier attribute="Namespace" context="mod-start" />
			</context>
			<context attribute="Nothing" lineEndContext="#stay" name="mod-start">
				<DetectSpaces attribute="Spaces" context="#stay" />
				<IncludeRules context="comment" />
				<DetectChar attribute="Braces" context="outside" char="{" />
			</context>
			<context attribute="Nothing" lineEndContext="#stay" name="function-signature-start">
				<DetectSpaces attribute="Spaces" context="#stay" />
				<IncludeRules context="comment" />
				<DetectIdentifier attribute="Function" context="function-start" />
			</context>
			<context attribute="Nothing" lineEndContext="#stay" name="function-start">
				<DetectSpaces attribute="Spaces" context="#stay" />
				<IncludeRules context="comment" />
				<!-- pop(function-start) pop(function-signature-start) -->
				<DetectChar attribute="Signature" context="#pop#pop" char=";" />
				<StringDetect attribute="Signature" context="return_type" String="-&gt;" />
				<DetectChar attribute="Generics" context="generics-parameters" char="&lt;" />
				<DetectChar attribute="Signature" context="arguments" char="(" />
			</context>
			<context attribute="Nothing" lineEndContext="#stay" name="return_type">
				<IncludeRules context="type" />
				<DetectChar lookAhead="true" context="#pop" char=";" />
			</context>
			<context attribute="Nothing" lineEndContext="#stay" name="external-type">
				<DetectSpaces attribute="Spaces" context="#stay" />
				<IncludeRules context="comment" />
				<StringDetect attribute="Keyword" context="external-fn" String="fn" />
				<RegExpr attribute="String" context="#stay" String="&quot;[^&quot;]*&quot;" />
			</context>
			<context attribute="Nothing" lineEndContext="#stay" name="external-fn">
				<DetectSpaces attribute="Spaces" context="#stay" />
				<IncludeRules context="comment" />
				<DetectChar attribute="Signature" context="#stay" char="(" />
				<!-- pop(external-fn) pop(external-type) -->
				<DetectChar attribute="Signature" context="#pop#pop" char=")" />
				<DetectIdentifier attribute="Type" context="external-fn-arg-type" />
				<StringDetect attribute="Keyword" context="external-fn-ret" String="-&gt;" />
				<!-- pop(external-fn) pop(external-type) -->
				<DetectChar lookAhead="true" context="#pop#pop" char="&gt;" />
				<!-- pop(external-fn) pop(external-type) -->
				<DetectChar lookAhead="true" context="#pop#pop" char=";" />
			</context>
			<context attribute="Nothing" lineEndContext="#stay" name="external-fn-ret">
				<IncludeRules context="type" />
				<!-- pop(external-fn-ret) pop(external-fn) pop(external-type) -->
				<DetectChar lookAhead="true" context="#pop#pop#pop" char="&gt;" />
				<!-- pop(external-fn-ret) pop(external-fn) pop(external-type) -->
				<DetectChar lookAhead="true" context="#pop#pop#pop" char=";" />
			</context>
			<context attribute="Nothing" lineEndContext="#stay" name="external-fn-arg-type">
				<IncludeRules context="type" />
				<DetectChar attribute="Signature" context="#stay" char=":" />
				<DetectChar attribute="Signature" context="#pop" char="," />
				<DetectChar attribute="Signature" context="#pop" char=")" />
			</context>
			<context attribute="Nothing" lineEndContext="#stay" name="type">
				<DetectSpaces attribute="Spaces" context="#stay" />
				<IncludeRules context="comment" />
				<RegExpr attribute="Namespace" context="#stay"
					String="(::\s*)?\w+\s*::(\s*\w+\s*::)*" />
				<StringDetect attribute="Keyword" context="#stay" String="const" />
				<StringDetect attribute="Keyword" context="external-type" String="extern" />
				<DetectIdentifier attribute="Type" context="#stay" />
				<StringDetect attribute="Keyword" context="#stay" String="mut" />
				<DetectChar attribute="Reference" context="#stay" char="&amp;" />
				<DetectChar attribute="Asterisk" context="#stay" char="*" />
				<DetectChar attribute="Generics" context="type-as-generics-parameter" char="&lt;" />
			</context>
			<context attribute="Nothing" lineEndContext="#stay" name="type-as-generics-parameter">
				<IncludeRules context="type" />
				<DetectChar attribute="Signature" context="#stay" char="," />
				<DetectChar attribute="Generics" context="#pop" char="&gt;" />
			</context>
			<context attribute="Nothing" lineEndContext="#stay" name="generics-parameters">
				<DetectSpaces attribute="Spaces" context="#stay" />
				<IncludeRules context="comment" />
				<DetectChar attribute="Generics" context="#pop" char="&gt;" />
				<DetectChar attribute="Signature" context="#stay" char="," />
				<DetectIdentifier attribute="Type" context="bound-start" />
			</context>
			<context attribute="Nothing" lineEndContext="#stay" name="bound-start">
				<DetectSpaces attribute="Spaces" context="#stay" />
				<IncludeRules context="comment" />
				<DetectChar attribute="Signature" context="#pop" char="," />
				<!-- pop(bound-start) pop(generics-parameters) -->
				<DetectChar attribute="Generics" context="#pop#pop" char="&gt;" />
				<DetectChar attribute="Signature" context="bound" char=":" />
			</context>
			<context attribute="Nothing" lineEndContext="#stay" name="bound">
				<DetectSpaces attribute="Spaces" context="#stay" />
				<IncludeRules context="comment" />
				<RegExpr attribute="Namespace" context="#stay"
					String="(::\s*)?\w+\s*::(\s*\w+\s*::)*" />
				<DetectIdentifier attribute="Type" context="#stay" />
				<RegExpr attribute="Lifetime" context="#stay" String="'[_a-z]+" />
				<DetectChar attribute="Signature" context="#stay" char="+" />
				<DetectChar attribute="Signature" context="#pop" char="," />
				<!-- pop(bound) pop(bound-start) -->
				<DetectChar lookAhead="true" context="#pop#pop" char="&gt;" />
				<DetectChar attribute="Generics" context="bound-as-generics-parameter" char="&lt;" />
			</context>
			<context attribute="Nothing" lineEndContext="#stay" name="bound-as-generics-parameter">
				<IncludeRules context="bound" />
				<DetectChar attribute="Signature" context="#stay" char="," />
			</context>
			<context attribute="Nothing" lineEndContext="#stay" name="arguments">
				<DetectSpaces attribute="Spaces" context="#stay" />
				<IncludeRules context="comment" />
				<DetectChar attribute="Signature" context="#stay" char="," />
				<DetectChar attribute="Signature" context="#pop" char=")" />
				<StringDetect attribute="Keyword" context="#stay" String="mut" />
				<DetectChar attribute="Reference" context="#stay" char="&amp;" />
				<StringDetect attribute="Keyword" context="#stay" String="self" />
				<DetectIdentifier attribute="Variable" context="argument-type-start" />
			</context>
			<context attribute="Nothing" lineEndContext="#stay" name="argument-type-start">
				<DetectSpaces attribute="Spaces" context="#stay" />
				<IncludeRules context="comment" />
				<DetectChar attribute="Signature" context="type-in-arguments" char=":" />
			</context>
			<context attribute="Nothing" lineEndContext="#stay" name="type-in-arguments">
				<IncludeRules context="type" />
				<!-- pop(type-in-arguments) pop(argument-type-start) -->
				<DetectChar attribute="Signature" context="#pop#pop" char="," />
				<!-- pop(type-in-arguments) pop(argument-type-start) -->
				<DetectChar lookAhead="true" context="#pop#pop" char=")" />
			</context>
			<context attribute="Nothing" lineEndContext="#stay" name="trait-name">
				<DetectSpaces attribute="Spaces" context="#stay" />
				<IncludeRules context="comment" />
				<DetectIdentifier attribute="Type" context="trait-start" />
			</context>
			<context attribute="Nothing" lineEndContext="#stay" name="trait-start">
				<DetectSpaces attribute="Spaces" context="#stay" />
				<IncludeRules context="comment" />
				<DetectChar attribute="Braces" context="between-trait-methods" char="{" />
			</context>
			<context attribute="Nothing" lineEndContext="#stay" name="between-trait-methods">
				<DetectSpaces attribute="Spaces" context="#stay" />
				<IncludeRules context="comment" />
				<StringDetect attribute="Keyword" context="#stay" String="pub" />
				<StringDetect attribute="Keyword" context="function-signature-start" String="fn" />
				<DetectChar attribute="Braces" context="outside" char="}" />
			</context>
			<context attribute="String" lineEndContext="#stay" name="string">
				<Detect2Chars attribute="String" context="#stay" char="\" char1="&quot;" />
				<DetectChar attribute="Quote" context="#pop" char="&quot;" />
			</context>
			<context attribute="Nothing" lineEndContext="#stay" name="extern">
				<DetectSpaces attribute="Spaces" context="#stay" />
				<IncludeRules context="comment" />
				<RegExpr attribute="String" context="#stay" String="&quot;[^&quot;]*&quot;" />
				<DetectChar attribute="Braces" context="external-block" char="{" />
				<StringDetect attribute="Keyword" context="introduce-crate" String="crate" />
			</context>
			<context attribute="Nothing" lineEndContext="#stay" name="external-block">
				<DetectSpaces attribute="Spaces" context="#stay" />
				<IncludeRules context="comment" />
				<StringDetect attribute="Keyword" context="#stay" String="pub" />
				<StringDetect attribute="Keyword" context="function-signature-start" String="fn" />
				<!-- pop(external-block) pop(extern) -->
				<DetectChar attribute="Braces" context="#pop#pop" char="}" />
			</context>
			<context attribute="Nothing" lineEndContext="#stay" name="introduce-crate">
				<DetectSpaces attribute="Spaces" context="#stay" />
				<IncludeRules context="comment" />
				<DetectChar attribute="Quote" context="crate-name-quotation" char="&quot;" />
				<DetectIdentifier attribute="Namespace" context="end-crate-decl" />
			</context>
			<context attribute="String" lineEndContext="#stay" name="crate-name-quotation">
				<Detect2Chars attribute="String" context="#stay" char="\" char1="&quot;" />
				<DetectChar attribute="Quote" context="crate-name-as" char="&quot;" />
			</context>
			<context attribute="Nothing" lineEndContext="#stay" name="crate-name-as">
				<DetectSpaces attribute="Spaces" context="#stay" />
				<IncludeRules context="comment" />
				<!-- pop(crate-name-as) pop(crate-name-quotation) -->
				<StringDetect attribute="Keyword" context="#pop#pop" String="as" />
			</context>
			<context attribute="Nothing" lineEndContext="#stay" name="end-crate-decl">
				<DetectSpaces attribute="Spaces" context="#stay" />
				<IncludeRules context="comment" />
				<!-- pop(end-crate-decl) pop(introduce-crate) pop(extern) -->
				<DetectChar attribute="Semicolon" context="#pop#pop#pop" char=";" />
			</context>
		</contexts>
		<itemDatas>
			<itemData name="Comment" color="#999" defStyleNum="dsComment" />
			<itemData name="Doc" color="#911" defStyleNum="dsComment" />
			<itemData name="Spaces" defStyleNum="dsNormal" />
			<itemData name="Nothing" color="#f00" underline="true" defStyleNum="dsError" />
			<itemData name="Keyword" color="#33e" defStyleNum="dsKeyword" />
			<itemData name="Quote" color="#666" defStyleNum="dsString" />
			<itemData name="String" color="#666" defStyleNum="dsString" />	
			<itemData name="Braces" color="#772" defStyleNum="dsRegionMarker" />
			<itemData name="Semicolon" color="#700" bold="true" defStyleNum="dsNormal" />
			<itemData name="Colon" color="#700" bold="true" defStyleNum="dsNormal" />
			<itemData name="Comma" color="#700" bold="true" defStyleNum="dsNormal" />
			<itemData name="Type" color="#282" bold="true" defStyleNum="dsDataType" />
			<itemData name="Function" color="#153" defStyleNum="dsNormal" />
			<itemData name="Namespace" color="#e59" defStyleNum="dsNormal" />
			<itemData name="Signature" color="#256" defStyleNum="dsNormal" />
			<itemData name="Variable" color="#422" defStyleNum="dsNormal" />
			<itemData name="Field" color="#422" defStyleNum="dsNormal" />
			<itemData name="Const" color="#211" defStyleNum="dsNormal" />
			<itemData name="Generics" color="#362" bold="true" defStyleNum="dsNormal" />
			<itemData name="Reference" color="#33e" bold="true" defStyleNum="dsNormal" />
			<itemData name="Asterisk" color="#33e" bold="true" defStyleNum="dsNormal" />
			<itemData name="Equal" color="#700" bold="true" defStyleNum="dsNormal" />
			<itemData name="Literal" color="#333" defStyleNum="dsNormal" />
		</itemDatas>
	</highlighting>
</language>
